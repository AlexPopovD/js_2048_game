{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_to_consumable_array.js","node_modules/@swc/helpers/esm/_array_without_holes.js","node_modules/@swc/helpers/esm/_array_like_to_array.js","node_modules/@swc/helpers/esm/_iterable_to_array.js","node_modules/@swc/helpers/esm/_non_iterable_spread.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js"],"sourcesContent":["(function () {\n\"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$71511d61b312f219(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$71511d61b312f219(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $c3b10a83b523f372$export$71511d61b312f219(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $c50969dc1df61e8b$export$71511d61b312f219(arr) {\n    if (Array.isArray(arr)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(arr);\n}\n\n\nfunction $09c9f293d010c0e1$export$71511d61b312f219(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\n\nfunction $38c2d4931cb7a7c4$export$71511d61b312f219() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\n\nfunction $d4f69c5c6c4654b1$export$71511d61b312f219(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n}\n\n\nfunction $227c6742e0ff6f82$export$71511d61b312f219(arr) {\n    return (0, $c50969dc1df61e8b$export$71511d61b312f219)(arr) || (0, $09c9f293d010c0e1$export$71511d61b312f219)(arr) || (0, $d4f69c5c6c4654b1$export$71511d61b312f219)(arr) || (0, $38c2d4931cb7a7c4$export$71511d61b312f219)();\n}\n\n\n\"use strict\";\nvar $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game() {\n        var initialState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        (0, $8713978b2328d32b$export$71511d61b312f219)(this, Game);\n        this.state = initialState;\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    (0, $4fc75ccb937ab1df$export$71511d61b312f219)(Game, [\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                var _this = this, _loop = function(row) {\n                    var newRow = _this.state[row].filter(function(num) {\n                        return num !== 0;\n                    });\n                    for(var i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n                        newRow[i] *= 2;\n                        _this.score += newRow[i];\n                        newRow[i + 1] = 0;\n                    }\n                    newRow = newRow.filter(function(num) {\n                        return num !== 0;\n                    });\n                    while(newRow.length < 4)newRow.push(0);\n                    _this.state[row] = newRow;\n                };\n                if (this.status !== \"playing\") return;\n                var prevState = this.deepCopyState();\n                for(var row = 0; row < this.state.length; row++)_loop(row);\n                if (this.hasStateChanged(prevState)) this.addRandomTile();\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                var _this = this, _loop = function(row) {\n                    var newRow = _this.state[row].reverse().filter(function(num) {\n                        return num !== 0;\n                    });\n                    for(var i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n                        newRow[i] *= 2;\n                        _this.score += newRow[i];\n                        newRow[i + 1] = 0;\n                    }\n                    newRow = newRow.filter(function(num) {\n                        return num !== 0;\n                    });\n                    while(newRow.length < 4)newRow.push(0);\n                    _this.state[row] = newRow.reverse();\n                };\n                if (this.status !== \"playing\") return;\n                var prevState = this.deepCopyState();\n                for(var row = 0; row < this.state.length; row++)_loop(row);\n                if (this.hasStateChanged(prevState)) this.addRandomTile();\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                var _this = this, _loop = function(row) {\n                    var newRow = transposed[row].filter(function(num) {\n                        return num !== 0;\n                    });\n                    for(var i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n                        newRow[i] *= 2;\n                        _this.score += newRow[i];\n                        newRow[i + 1] = 0;\n                    }\n                    newRow = newRow.filter(function(num) {\n                        return num !== 0;\n                    });\n                    while(newRow.length < 4)newRow.push(0);\n                    transposed[row] = newRow;\n                };\n                if (this.status !== \"playing\") return;\n                var prevState = this.deepCopyState();\n                var transposed = $3d28d7f1aac198f5$var$transpose(this.state);\n                for(var row = 0; row < transposed.length; row++)_loop(row);\n                this.state = $3d28d7f1aac198f5$var$transpose(transposed);\n                if (this.hasStateChanged(prevState)) this.addRandomTile();\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                var _this = this, _loop = function(row) {\n                    var newRow = transposed[row].reverse().filter(function(num) {\n                        return num !== 0;\n                    });\n                    for(var i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n                        newRow[i] *= 2;\n                        _this.score += newRow[i];\n                        newRow[i + 1] = 0;\n                    }\n                    newRow = newRow.filter(function(num) {\n                        return num !== 0;\n                    });\n                    while(newRow.length < 4)newRow.push(0);\n                    transposed[row] = newRow.reverse();\n                };\n                if (this.status !== \"playing\") return;\n                var prevState = this.deepCopyState();\n                var transposed = $3d28d7f1aac198f5$var$transpose(this.state);\n                for(var row = 0; row < transposed.length; row++)_loop(row);\n                this.state = $3d28d7f1aac198f5$var$transpose(transposed);\n                if (this.hasStateChanged(prevState)) this.addRandomTile();\n            }\n        },\n        {\n            key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            key: \"getState\",\n            value: function getState() {\n                return this.state;\n            }\n        },\n        {\n            key: \"getStatus\",\n            value: function getStatus() {\n                return this.status;\n            }\n        },\n        {\n            key: \"start\",\n            value: function start() {\n                if (this.status === \"idle\") {\n                    this.status = \"playing\";\n                    this.addRandomTile();\n                    this.addRandomTile();\n                }\n            }\n        },\n        {\n            key: \"restart\",\n            value: function restart() {\n                this.status = \"idle\";\n                this.score = 0;\n                this.state = [\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ]\n                ];\n            }\n        },\n        {\n            key: \"hasEmptyCells\",\n            value: function hasEmptyCells() {\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    for(var _iterator = this.state[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                        var row = _step.value;\n                        if (row.includes(0)) return true;\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n                return false;\n            }\n        },\n        {\n            key: \"canCombine\",\n            value: function canCombine() {\n                for(var row = 0; row < this.state.length; row++)for(var col = 0; col < this.state[row].length; col++){\n                    var current = this.state[row][col];\n                    if (row > 0 && this.state[row - 1][col] === current || row < 3 && this.state[row + 1][col] === current || col > 0 && this.state[row][col - 1] === current || col < 3 && this.state[row][col + 1] === current) return true;\n                }\n                return false;\n            }\n        },\n        {\n            key: \"checkGameState\",\n            value: function checkGameState() {\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    for(var _iterator = this.state[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                        var row = _step.value;\n                        if (row.includes(2048)) {\n                            this.status = \"win\";\n                            return;\n                        }\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n                if (this.canCombine() || this.hasEmptyCells()) return;\n                this.status = \"lose\";\n            }\n        },\n        {\n            key: \"addRandomTile\",\n            value: function addRandomTile() {\n                var emptyCells = [];\n                for(var row = 0; row < this.state.length; row++){\n                    for(var col = 0; col < this.state[row].length; col++)if (this.state[row][col] === 0) emptyCells.push({\n                        row: row,\n                        col: col\n                    });\n                }\n                if (emptyCells.length > 0) {\n                    var randomCell = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n                    this.state[randomCell.row][randomCell.col] = Math.random() < 0.9 ? 2 : 4;\n                }\n            }\n        },\n        {\n            key: \"hasStateChanged\",\n            value: function hasStateChanged(prevState) {\n                for(var row = 0; row < this.state.length; row++)for(var col = 0; col < this.state[row].length; col++){\n                    if (this.state[row][col] !== prevState[row][col]) return true;\n                }\n                return false;\n            }\n        },\n        {\n            key: \"deepCopyState\",\n            value: function deepCopyState() {\n                return this.state.map(function(row) {\n                    return (0, $227c6742e0ff6f82$export$71511d61b312f219)(row);\n                });\n            }\n        }\n    ]);\n    return Game;\n}();\nfunction $3d28d7f1aac198f5$var$transpose(matrix) {\n    var transposed = [];\n    for(var i = 0; i < matrix[0].length; i++){\n        transposed[i] = [];\n        for(var j = 0; j < matrix.length; j++)transposed[i][j] = matrix[j][i];\n    }\n    return transposed;\n}\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\n$197cd56b15c33885$var$updateUI();\nvar $197cd56b15c33885$var$button = document.querySelector(\".button\");\nvar $197cd56b15c33885$var$messageStart = document.querySelector(\".message-start\");\nvar $197cd56b15c33885$var$messageLose = document.querySelector(\".message-lose\");\nvar $197cd56b15c33885$var$messageWin = document.querySelector(\".message-win\");\n$197cd56b15c33885$var$button.addEventListener(\"click\", function() {\n    if ($197cd56b15c33885$var$game.status === \"idle\") {\n        $197cd56b15c33885$var$game.start();\n        $197cd56b15c33885$var$messageStart.classList.add(\"hidden\");\n        $197cd56b15c33885$var$button.textContent = \"Restart\";\n        $197cd56b15c33885$var$button.classList.remove(\"start\");\n        $197cd56b15c33885$var$button.classList.add(\"restart\");\n    } else {\n        $197cd56b15c33885$var$game.restart();\n        $197cd56b15c33885$var$button.textContent = \"Start\";\n        $197cd56b15c33885$var$button.classList.remove(\"restart\");\n        $197cd56b15c33885$var$button.classList.add(\"start\");\n        $197cd56b15c33885$var$messageStart.classList.remove(\"hidden\");\n        $197cd56b15c33885$var$messageLose.classList.add(\"hidden\");\n        $197cd56b15c33885$var$messageWin.classList.add(\"hidden\");\n    }\n    $197cd56b15c33885$var$updateUI();\n});\ndocument.addEventListener(\"keydown\", function(e) {\n    var eventKey = e.key;\n    if ($197cd56b15c33885$var$game.status !== \"playing\") return;\n    switch(eventKey){\n        case \"ArrowUp\":\n            $197cd56b15c33885$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $197cd56b15c33885$var$game.moveDown();\n            break;\n        case \"ArrowLeft\":\n            $197cd56b15c33885$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $197cd56b15c33885$var$game.moveRight();\n            break;\n        default:\n            return;\n    }\n    $197cd56b15c33885$var$updateUI();\n    $197cd56b15c33885$var$game.checkGameState();\n    if ($197cd56b15c33885$var$game.status === \"lose\") $197cd56b15c33885$var$messageLose.classList.remove(\"hidden\");\n    if ($197cd56b15c33885$var$game.status === \"win\") $197cd56b15c33885$var$messageWin.classList.remove(\"hidden\");\n});\nfunction $197cd56b15c33885$var$updateUI() {\n    var cells = document.querySelectorAll(\".field-cell\");\n    for(var row = 0; row < $197cd56b15c33885$var$game.state.length; row++)for(var col = 0; col < $197cd56b15c33885$var$game.state[row].length; col++){\n        var value = $197cd56b15c33885$var$game.state[row][col];\n        var cellIndex = row * 4 + col;\n        var cell = cells[cellIndex];\n        cell.className = \"field-cell\";\n        if (value !== 0) {\n            cell.textContent = value;\n            cell.classList.add(\"field-cell--\".concat(value));\n        }\n        if (value === 0) cell.textContent = \"\";\n    }\n    var scoreElement = document.querySelector(\".game-score\");\n    scoreElement.textContent = $197cd56b15c33885$var$game.score;\n}\n\n})();\n//# sourceMappingURL=index.2ef66b13.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nupdateUI();\n\nconst button = document.querySelector('.button');\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\n\nbutton.addEventListener('click', () => {\n  if (game.status === 'idle') {\n    game.start();\n\n    messageStart.classList.add('hidden');\n    button.textContent = 'Restart';\n    button.classList.remove('start');\n    button.classList.add('restart');\n  } else {\n    game.restart();\n    button.textContent = 'Start';\n\n    button.classList.remove('restart');\n    button.classList.add('start');\n    messageStart.classList.remove('hidden');\n    messageLose.classList.add('hidden');\n    messageWin.classList.add('hidden');\n  }\n\n  updateUI();\n});\n\ndocument.addEventListener('keydown', (e) => {\n  const eventKey = e.key;\n\n  if (game.status !== 'playing') {\n    return;\n  }\n\n  switch (eventKey) {\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n\n    default:\n      return;\n  }\n\n  updateUI();\n  game.checkGameState();\n\n  if (game.status === 'lose') {\n    messageLose.classList.remove('hidden');\n  }\n\n  if (game.status === 'win') {\n    messageWin.classList.remove('hidden');\n  }\n});\n\nfunction updateUI() {\n  const cells = document.querySelectorAll('.field-cell');\n\n  for (let row = 0; row < game.state.length; row++) {\n    for (let col = 0; col < game.state[row].length; col++) {\n      const value = game.state[row][col];\n      const cellIndex = row * 4 + col;\n      const cell = cells[cellIndex];\n\n      cell.className = 'field-cell';\n\n      if (value !== 0) {\n        cell.textContent = value;\n        cell.classList.add(`field-cell--${value}`);\n      }\n\n      if (value === 0) {\n        cell.textContent = '';\n      }\n    }\n  }\n\n  const scoreElement = document.querySelector('.game-score');\n\n  scoreElement.textContent = game.score;\n}\n","'use strict';\n\nclass Game {\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.state = initialState;\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  moveLeft() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const prevState = this.deepCopyState();\n\n    for (let row = 0; row < this.state.length; row++) {\n      let newRow = this.state[row].filter((num) => num !== 0);\n\n      for (let i = 0; i < newRow.length - 1; i++) {\n        if (newRow[i] === newRow[i + 1]) {\n          newRow[i] *= 2;\n          this.score += newRow[i];\n          newRow[i + 1] = 0;\n        }\n      }\n\n      newRow = newRow.filter((num) => num !== 0);\n\n      while (newRow.length < 4) {\n        newRow.push(0);\n      }\n\n      this.state[row] = newRow;\n    }\n\n    if (this.hasStateChanged(prevState)) {\n      this.addRandomTile();\n    }\n  }\n\n  moveRight() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const prevState = this.deepCopyState();\n\n    for (let row = 0; row < this.state.length; row++) {\n      let newRow = this.state[row].reverse().filter((num) => num !== 0);\n\n      for (let i = 0; i < newRow.length - 1; i++) {\n        if (newRow[i] === newRow[i + 1]) {\n          newRow[i] *= 2;\n          this.score += newRow[i];\n          newRow[i + 1] = 0;\n        }\n      }\n\n      newRow = newRow.filter((num) => num !== 0);\n\n      while (newRow.length < 4) {\n        newRow.push(0);\n      }\n\n      this.state[row] = newRow.reverse();\n    }\n\n    if (this.hasStateChanged(prevState)) {\n      this.addRandomTile();\n    }\n  }\n\n  moveUp() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const prevState = this.deepCopyState();\n    const transposed = transpose(this.state);\n\n    for (let row = 0; row < transposed.length; row++) {\n      let newRow = transposed[row].filter((num) => num !== 0);\n\n      for (let i = 0; i < newRow.length - 1; i++) {\n        if (newRow[i] === newRow[i + 1]) {\n          newRow[i] *= 2;\n          this.score += newRow[i];\n          newRow[i + 1] = 0;\n        }\n      }\n\n      newRow = newRow.filter((num) => num !== 0);\n\n      while (newRow.length < 4) {\n        newRow.push(0);\n      }\n\n      transposed[row] = newRow;\n    }\n\n    this.state = transpose(transposed);\n\n    if (this.hasStateChanged(prevState)) {\n      this.addRandomTile();\n    }\n  }\n\n  moveDown() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const prevState = this.deepCopyState();\n    const transposed = transpose(this.state);\n\n    for (let row = 0; row < transposed.length; row++) {\n      let newRow = transposed[row].reverse().filter((num) => num !== 0);\n\n      for (let i = 0; i < newRow.length - 1; i++) {\n        if (newRow[i] === newRow[i + 1]) {\n          newRow[i] *= 2;\n          this.score += newRow[i];\n          newRow[i + 1] = 0;\n        }\n      }\n\n      newRow = newRow.filter((num) => num !== 0);\n\n      while (newRow.length < 4) {\n        newRow.push(0);\n      }\n\n      transposed[row] = newRow.reverse();\n    }\n\n    this.state = transpose(transposed);\n\n    if (this.hasStateChanged(prevState)) {\n      this.addRandomTile();\n    }\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    if (this.status === 'idle') {\n      this.status = 'playing';\n      this.addRandomTile();\n      this.addRandomTile();\n    }\n  }\n\n  restart() {\n    this.status = 'idle';\n    this.score = 0;\n\n    this.state = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n  }\n\n  hasEmptyCells() {\n    for (const row of this.state) {\n      if (row.includes(0)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  canCombine() {\n    for (let row = 0; row < this.state.length; row++) {\n      for (let col = 0; col < this.state[row].length; col++) {\n        const current = this.state[row][col];\n\n        if (\n          (row > 0 && this.state[row - 1][col] === current) ||\n          (row < 3 && this.state[row + 1][col] === current) ||\n          (col > 0 && this.state[row][col - 1] === current) ||\n          (col < 3 && this.state[row][col + 1] === current)\n        ) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  checkGameState() {\n    for (const row of this.state) {\n      if (row.includes(2048)) {\n        this.status = 'win';\n\n        return;\n      }\n    }\n\n    if (this.canCombine() || this.hasEmptyCells()) {\n      return;\n    }\n\n    this.status = 'lose';\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n\n    for (let row = 0; row < this.state.length; row++) {\n      for (let col = 0; col < this.state[row].length; col++) {\n        if (this.state[row][col] === 0) {\n          emptyCells.push({ row, col });\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const randomCell =\n        emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      this.state[randomCell.row][randomCell.col] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  hasStateChanged(prevState) {\n    for (let row = 0; row < this.state.length; row++) {\n      for (let col = 0; col < this.state[row].length; col++) {\n        if (this.state[row][col] !== prevState[row][col]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  deepCopyState() {\n    return this.state.map((row) => [...row]);\n  }\n}\n\nfunction transpose(matrix) {\n  const transposed = [];\n\n  for (let i = 0; i < matrix[0].length; i++) {\n    transposed[i] = [];\n\n    for (let j = 0; j < matrix.length; j++) {\n      transposed[i][j] = matrix[j][i];\n    }\n  }\n\n  return transposed;\n}\n\nmodule.exports = Game;\n","function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","import { _ as _array_without_holes } from \"./_array_without_holes.js\";\nimport { _ as _iterable_to_array } from \"./_iterable_to_array.js\";\nimport { _ as _non_iterable_spread } from \"./_non_iterable_spread.js\";\nimport { _ as _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nexport { _to_consumable_array as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nexport { _array_without_holes as _ };\n","function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","function _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) {\n        return Array.from(iter);\n    }\n}\nexport { _iterable_to_array as _ };\n","function _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_spread as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n"],"names":["$c3b10a83b523f372$export$71511d61b312f219","arr","len","length","i","arr2","Array","$3d28d7f1aac198f5$var$transpose","matrix","transposed","j","$197cd56b15c33885$var$game","protoProps","Game","initialState","arguments","instance","Constructor","TypeError","state","score","status","key","value","_this","prevState","deepCopyState","row","_loop","newRow","filter","num","push","hasStateChanged","addRandomTile","reverse","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","includes","err","return","col","current","canCombine","hasEmptyCells","emptyCells","randomCell","Math","floor","random","map","isArray","iter","from","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","$197cd56b15c33885$var$updateUI","$197cd56b15c33885$var$button","document","querySelector","$197cd56b15c33885$var$messageStart","$197cd56b15c33885$var$messageLose","$197cd56b15c33885$var$messageWin","cells","querySelectorAll","cell","className","textContent","classList","add","concat","scoreElement","addEventListener","start","remove","restart","e","eventKey","moveUp","moveDown","moveLeft","moveRight","checkGameState"],"version":3,"file":"index.2ef66b13.js.map"}