{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.state = initialState;\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    moveLeft() {\n        if (this.status !== \"playing\") return;\n        const prevState = this.deepCopyState();\n        for(let row = 0; row < this.state.length; row++){\n            let newRow = this.state[row].filter((num)=>num !== 0);\n            for(let i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n                newRow[i] *= 2;\n                this.score += newRow[i];\n                newRow[i + 1] = 0;\n            }\n            newRow = newRow.filter((num)=>num !== 0);\n            while(newRow.length < 4)newRow.push(0);\n            this.state[row] = newRow;\n        }\n        if (this.hasStateChanged(prevState)) this.addRandomTile();\n    }\n    moveRight() {\n        if (this.status !== \"playing\") return;\n        const prevState = this.deepCopyState();\n        for(let row = 0; row < this.state.length; row++){\n            let newRow = this.state[row].reverse().filter((num)=>num !== 0);\n            for(let i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n                newRow[i] *= 2;\n                this.score += newRow[i];\n                newRow[i + 1] = 0;\n            }\n            newRow = newRow.filter((num)=>num !== 0);\n            while(newRow.length < 4)newRow.push(0);\n            this.state[row] = newRow.reverse();\n        }\n        if (this.hasStateChanged(prevState)) this.addRandomTile();\n    }\n    moveUp() {\n        if (this.status !== \"playing\") return;\n        const prevState = this.deepCopyState();\n        const transposed = $a5fd07fa01589658$var$transpose(this.state);\n        for(let row = 0; row < transposed.length; row++){\n            let newRow = transposed[row].filter((num)=>num !== 0);\n            for(let i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n                newRow[i] *= 2;\n                this.score += newRow[i];\n                newRow[i + 1] = 0;\n            }\n            newRow = newRow.filter((num)=>num !== 0);\n            while(newRow.length < 4)newRow.push(0);\n            transposed[row] = newRow;\n        }\n        this.state = $a5fd07fa01589658$var$transpose(transposed);\n        if (this.hasStateChanged(prevState)) this.addRandomTile();\n    }\n    moveDown() {\n        if (this.status !== \"playing\") return;\n        const prevState = this.deepCopyState();\n        const transposed = $a5fd07fa01589658$var$transpose(this.state);\n        for(let row = 0; row < transposed.length; row++){\n            let newRow = transposed[row].reverse().filter((num)=>num !== 0);\n            for(let i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n                newRow[i] *= 2;\n                this.score += newRow[i];\n                newRow[i + 1] = 0;\n            }\n            newRow = newRow.filter((num)=>num !== 0);\n            while(newRow.length < 4)newRow.push(0);\n            transposed[row] = newRow.reverse();\n        }\n        this.state = $a5fd07fa01589658$var$transpose(transposed);\n        if (this.hasStateChanged(prevState)) this.addRandomTile();\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.state;\n    }\n    getStatus() {\n        return this.status;\n    }\n    start() {\n        if (this.status === \"idle\") {\n            this.status = \"playing\";\n            this.addRandomTile();\n            this.addRandomTile();\n        }\n    }\n    restart() {\n        this.status = \"idle\";\n        this.score = 0;\n        this.state = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n    }\n    hasEmptyCells() {\n        for (const row of this.state){\n            if (row.includes(0)) return true;\n        }\n        return false;\n    }\n    canCombine() {\n        for(let row = 0; row < this.state.length; row++)for(let col = 0; col < this.state[row].length; col++){\n            const current = this.state[row][col];\n            if (row > 0 && this.state[row - 1][col] === current || row < 3 && this.state[row + 1][col] === current || col > 0 && this.state[row][col - 1] === current || col < 3 && this.state[row][col + 1] === current) return true;\n        }\n        return false;\n    }\n    checkGameState() {\n        for (const row of this.state)if (row.includes(2048)) {\n            this.status = \"win\";\n            return;\n        }\n        if (this.canCombine() || this.hasEmptyCells()) return;\n        this.status = \"lose\";\n    }\n    addRandomTile() {\n        const emptyCells = [];\n        for(let row = 0; row < this.state.length; row++){\n            for(let col = 0; col < this.state[row].length; col++)if (this.state[row][col] === 0) emptyCells.push({\n                row: row,\n                col: col\n            });\n        }\n        if (emptyCells.length > 0) {\n            const randomCell = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n            this.state[randomCell.row][randomCell.col] = Math.random() < 0.9 ? 2 : 4;\n        }\n    }\n    hasStateChanged(prevState) {\n        for(let row = 0; row < this.state.length; row++)for(let col = 0; col < this.state[row].length; col++){\n            if (this.state[row][col] !== prevState[row][col]) return true;\n        }\n        return false;\n    }\n    deepCopyState() {\n        return this.state.map((row)=>[\n                ...row\n            ]);\n    }\n}\nfunction $a5fd07fa01589658$var$transpose(matrix) {\n    const transposed = [];\n    for(let i = 0; i < matrix[0].length; i++){\n        transposed[i] = [];\n        for(let j = 0; j < matrix.length; j++)transposed[i][j] = matrix[j][i];\n    }\n    return transposed;\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\n$09e991522ca7e64e$var$updateUI();\nconst $09e991522ca7e64e$var$button = document.querySelector(\".button\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-win\");\n$09e991522ca7e64e$var$button.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$game.status === \"idle\") {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$button.textContent = \"Restart\";\n        $09e991522ca7e64e$var$button.classList.remove(\"start\");\n        $09e991522ca7e64e$var$button.classList.add(\"restart\");\n    } else {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$button.textContent = \"Start\";\n        $09e991522ca7e64e$var$button.classList.remove(\"restart\");\n        $09e991522ca7e64e$var$button.classList.add(\"start\");\n        $09e991522ca7e64e$var$messageStart.classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n    }\n    $09e991522ca7e64e$var$updateUI();\n});\ndocument.addEventListener(\"keydown\", (e)=>{\n    const eventKey = e.key;\n    if ($09e991522ca7e64e$var$game.status !== \"playing\") return;\n    switch(eventKey){\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        default:\n            return;\n    }\n    $09e991522ca7e64e$var$updateUI();\n    $09e991522ca7e64e$var$game.checkGameState();\n    if ($09e991522ca7e64e$var$game.status === \"lose\") $09e991522ca7e64e$var$messageLose.classList.remove(\"hidden\");\n    if ($09e991522ca7e64e$var$game.status === \"win\") $09e991522ca7e64e$var$messageWin.classList.remove(\"hidden\");\n});\nfunction $09e991522ca7e64e$var$updateUI() {\n    const cells = document.querySelectorAll(\".field-cell\");\n    for(let row = 0; row < $09e991522ca7e64e$var$game.state.length; row++)for(let col = 0; col < $09e991522ca7e64e$var$game.state[row].length; col++){\n        const value = $09e991522ca7e64e$var$game.state[row][col];\n        const cellIndex = row * 4 + col;\n        const cell = cells[cellIndex];\n        cell.className = \"field-cell\";\n        if (value !== 0) {\n            cell.textContent = value;\n            cell.classList.add(`field-cell--${value}`);\n        }\n        if (value === 0) cell.textContent = \"\";\n    }\n    const scoreElement = document.querySelector(\".game-score\");\n    scoreElement.textContent = $09e991522ca7e64e$var$game.score;\n}\n\n\n//# sourceMappingURL=index.b1c0afbe.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nupdateUI();\n\nconst button = document.querySelector('.button');\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\n\nbutton.addEventListener('click', () => {\n  if (game.status === 'idle') {\n    game.start();\n\n    messageStart.classList.add('hidden');\n    button.textContent = 'Restart';\n    button.classList.remove('start');\n    button.classList.add('restart');\n  } else {\n    game.restart();\n    button.textContent = 'Start';\n\n    button.classList.remove('restart');\n    button.classList.add('start');\n    messageStart.classList.remove('hidden');\n    messageLose.classList.add('hidden');\n    messageWin.classList.add('hidden');\n  }\n\n  updateUI();\n});\n\ndocument.addEventListener('keydown', (e) => {\n  const eventKey = e.key;\n\n  if (game.status !== 'playing') {\n    return;\n  }\n\n  switch (eventKey) {\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n\n    default:\n      return;\n  }\n\n  updateUI();\n  game.checkGameState();\n\n  if (game.status === 'lose') {\n    messageLose.classList.remove('hidden');\n  }\n\n  if (game.status === 'win') {\n    messageWin.classList.remove('hidden');\n  }\n});\n\nfunction updateUI() {\n  const cells = document.querySelectorAll('.field-cell');\n\n  for (let row = 0; row < game.state.length; row++) {\n    for (let col = 0; col < game.state[row].length; col++) {\n      const value = game.state[row][col];\n      const cellIndex = row * 4 + col;\n      const cell = cells[cellIndex];\n\n      cell.className = 'field-cell';\n\n      if (value !== 0) {\n        cell.textContent = value;\n        cell.classList.add(`field-cell--${value}`);\n      }\n\n      if (value === 0) {\n        cell.textContent = '';\n      }\n    }\n  }\n\n  const scoreElement = document.querySelector('.game-score');\n\n  scoreElement.textContent = game.score;\n}\n","'use strict';\n\nclass Game {\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.state = initialState;\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  moveLeft() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const prevState = this.deepCopyState();\n\n    for (let row = 0; row < this.state.length; row++) {\n      let newRow = this.state[row].filter((num) => num !== 0);\n\n      for (let i = 0; i < newRow.length - 1; i++) {\n        if (newRow[i] === newRow[i + 1]) {\n          newRow[i] *= 2;\n          this.score += newRow[i];\n          newRow[i + 1] = 0;\n        }\n      }\n\n      newRow = newRow.filter((num) => num !== 0);\n\n      while (newRow.length < 4) {\n        newRow.push(0);\n      }\n\n      this.state[row] = newRow;\n    }\n\n    if (this.hasStateChanged(prevState)) {\n      this.addRandomTile();\n    }\n  }\n\n  moveRight() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const prevState = this.deepCopyState();\n\n    for (let row = 0; row < this.state.length; row++) {\n      let newRow = this.state[row].reverse().filter((num) => num !== 0);\n\n      for (let i = 0; i < newRow.length - 1; i++) {\n        if (newRow[i] === newRow[i + 1]) {\n          newRow[i] *= 2;\n          this.score += newRow[i];\n          newRow[i + 1] = 0;\n        }\n      }\n\n      newRow = newRow.filter((num) => num !== 0);\n\n      while (newRow.length < 4) {\n        newRow.push(0);\n      }\n\n      this.state[row] = newRow.reverse();\n    }\n\n    if (this.hasStateChanged(prevState)) {\n      this.addRandomTile();\n    }\n  }\n\n  moveUp() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const prevState = this.deepCopyState();\n    const transposed = transpose(this.state);\n\n    for (let row = 0; row < transposed.length; row++) {\n      let newRow = transposed[row].filter((num) => num !== 0);\n\n      for (let i = 0; i < newRow.length - 1; i++) {\n        if (newRow[i] === newRow[i + 1]) {\n          newRow[i] *= 2;\n          this.score += newRow[i];\n          newRow[i + 1] = 0;\n        }\n      }\n\n      newRow = newRow.filter((num) => num !== 0);\n\n      while (newRow.length < 4) {\n        newRow.push(0);\n      }\n\n      transposed[row] = newRow;\n    }\n\n    this.state = transpose(transposed);\n\n    if (this.hasStateChanged(prevState)) {\n      this.addRandomTile();\n    }\n  }\n\n  moveDown() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const prevState = this.deepCopyState();\n    const transposed = transpose(this.state);\n\n    for (let row = 0; row < transposed.length; row++) {\n      let newRow = transposed[row].reverse().filter((num) => num !== 0);\n\n      for (let i = 0; i < newRow.length - 1; i++) {\n        if (newRow[i] === newRow[i + 1]) {\n          newRow[i] *= 2;\n          this.score += newRow[i];\n          newRow[i + 1] = 0;\n        }\n      }\n\n      newRow = newRow.filter((num) => num !== 0);\n\n      while (newRow.length < 4) {\n        newRow.push(0);\n      }\n\n      transposed[row] = newRow.reverse();\n    }\n\n    this.state = transpose(transposed);\n\n    if (this.hasStateChanged(prevState)) {\n      this.addRandomTile();\n    }\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    if (this.status === 'idle') {\n      this.status = 'playing';\n      this.addRandomTile();\n      this.addRandomTile();\n    }\n  }\n\n  restart() {\n    this.status = 'idle';\n    this.score = 0;\n\n    this.state = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n  }\n\n  hasEmptyCells() {\n    for (const row of this.state) {\n      if (row.includes(0)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  canCombine() {\n    for (let row = 0; row < this.state.length; row++) {\n      for (let col = 0; col < this.state[row].length; col++) {\n        const current = this.state[row][col];\n\n        if (\n          (row > 0 && this.state[row - 1][col] === current) ||\n          (row < 3 && this.state[row + 1][col] === current) ||\n          (col > 0 && this.state[row][col - 1] === current) ||\n          (col < 3 && this.state[row][col + 1] === current)\n        ) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  checkGameState() {\n    for (const row of this.state) {\n      if (row.includes(2048)) {\n        this.status = 'win';\n\n        return;\n      }\n    }\n\n    if (this.canCombine() || this.hasEmptyCells()) {\n      return;\n    }\n\n    this.status = 'lose';\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n\n    for (let row = 0; row < this.state.length; row++) {\n      for (let col = 0; col < this.state[row].length; col++) {\n        if (this.state[row][col] === 0) {\n          emptyCells.push({ row, col });\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const randomCell =\n        emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      this.state[randomCell.row][randomCell.col] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  hasStateChanged(prevState) {\n    for (let row = 0; row < this.state.length; row++) {\n      for (let col = 0; col < this.state[row].length; col++) {\n        if (this.state[row][col] !== prevState[row][col]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  deepCopyState() {\n    return this.state.map((row) => [...row]);\n  }\n}\n\nfunction transpose(matrix) {\n  const transposed = [];\n\n  for (let i = 0; i < matrix[0].length; i++) {\n    transposed[i] = [];\n\n    for (let j = 0; j < matrix.length; j++) {\n      transposed[i][j] = matrix[j][i];\n    }\n  }\n\n  return transposed;\n}\n\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$var$transpose","matrix","transposed","i","length","j","$09e991522ca7e64e$var$game","constructor","initialState","state","score","status","moveLeft","prevState","deepCopyState","row","newRow","filter","num","push","hasStateChanged","addRandomTile","moveRight","reverse","moveUp","moveDown","getScore","getState","getStatus","start","restart","hasEmptyCells","includes","canCombine","col","current","checkGameState","emptyCells","randomCell","Math","floor","random","map","$09e991522ca7e64e$var$updateUI","$09e991522ca7e64e$var$button","document","querySelector","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$messageWin","cells","querySelectorAll","value","cell","className","textContent","classList","add","scoreElement","addEventListener","remove","e","eventKey","key"],"version":3,"file":"index.b1c0afbe.js.map"}